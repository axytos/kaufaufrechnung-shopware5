<?php

namespace AxytosKaufAufRechnungShopware5\Configuration;

use Shopware\Models\Order\Status;

class AfterCheckoutPaymentStatus
{
    const PAYMENT_STATE_PARTIALLY_INVOICED = 'PAYMENT_STATE_PARTIALLY_INVOICED';
    const PAYMENT_STATE_COMPLETELY_INVOICED = 'PAYMENT_STATE_COMPLETELY_INVOICED';
    const PAYMENT_STATE_PARTIALLY_PAID = 'PAYMENT_STATE_PARTIALLY_PAID';
    const PAYMENT_STATE_COMPLETELY_PAID = 'PAYMENT_STATE_COMPLETELY_PAID';
    const PAYMENT_STATE_1ST_REMINDER = 'PAYMENT_STATE_1ST_REMINDER';
    const PAYMENT_STATE_2ND_REMINDER = 'PAYMENT_STATE_2ND_REMINDER';
    const PAYMENT_STATE_3RD_REMINDER = 'PAYMENT_STATE_3RD_REMINDER';
    const PAYMENT_STATE_ENCASHMENT = 'PAYMENT_STATE_ENCASHMENT';
    const PAYMENT_STATE_OPEN = 'PAYMENT_STATE_OPEN';
    const PAYMENT_STATE_RESERVED = 'PAYMENT_STATE_RESERVED';
    const PAYMENT_STATE_DELAYED = 'PAYMENT_STATE_DELAYED';
    const PAYMENT_STATE_RE_CREDITING = 'PAYMENT_STATE_RE_CREDITING';
    const PAYMENT_STATE_REVIEW_NECESSARY = 'PAYMENT_STATE_REVIEW_NECESSARY';
    const PAYMENT_STATE_NO_CREDIT_APPROVED = 'PAYMENT_STATE_NO_CREDIT_APPROVED';
    const PAYMENT_STATE_THE_CREDIT_HAS_BEEN_PRELIMINARILY_ACCEPTED = 'PAYMENT_STATE_THE_CREDIT_HAS_BEEN_PRELIMINARILY_ACCEPTED';
    const PAYMENT_STATE_THE_CREDIT_HAS_BEEN_ACCEPTED = 'PAYMENT_STATE_THE_CREDIT_HAS_BEEN_ACCEPTED';
    const PAYMENT_STATE_THE_PAYMENT_HAS_BEEN_ORDERED = 'PAYMENT_STATE_THE_PAYMENT_HAS_BEEN_ORDERED';
    const PAYMENT_STATE_A_TIME_EXTENSION_HAS_BEEN_REGISTERED = 'PAYMENT_STATE_A_TIME_EXTENSION_HAS_BEEN_REGISTERED';
    const PAYMENT_STATE_THE_PROCESS_HAS_BEEN_CANCELLED = 'PAYMENT_STATE_THE_PROCESS_HAS_BEEN_CANCELLED';

    /**
     * @var int
     */
    private static $default = Status::ORDER_STATE_OPEN;

    /**
     * @var array<string,int>
     */
    private static $paymentStatusMapping = [
        self::PAYMENT_STATE_PARTIALLY_INVOICED => Status::PAYMENT_STATE_PARTIALLY_INVOICED,
        self::PAYMENT_STATE_COMPLETELY_INVOICED => Status::PAYMENT_STATE_COMPLETELY_INVOICED,
        self::PAYMENT_STATE_PARTIALLY_PAID => Status::PAYMENT_STATE_PARTIALLY_PAID,
        self::PAYMENT_STATE_COMPLETELY_PAID => Status::PAYMENT_STATE_COMPLETELY_PAID,
        self::PAYMENT_STATE_1ST_REMINDER => Status::PAYMENT_STATE_1ST_REMINDER,
        self::PAYMENT_STATE_2ND_REMINDER => Status::PAYMENT_STATE_2ND_REMINDER,
        self::PAYMENT_STATE_3RD_REMINDER => Status::PAYMENT_STATE_3RD_REMINDER,
        self::PAYMENT_STATE_ENCASHMENT => Status::PAYMENT_STATE_ENCASHMENT,
        self::PAYMENT_STATE_OPEN => Status::PAYMENT_STATE_OPEN,
        self::PAYMENT_STATE_RESERVED => Status::PAYMENT_STATE_RESERVED,
        self::PAYMENT_STATE_DELAYED => Status::PAYMENT_STATE_DELAYED,
        self::PAYMENT_STATE_RE_CREDITING => Status::PAYMENT_STATE_RE_CREDITING,
        self::PAYMENT_STATE_REVIEW_NECESSARY => Status::PAYMENT_STATE_REVIEW_NECESSARY,
        self::PAYMENT_STATE_NO_CREDIT_APPROVED => Status::PAYMENT_STATE_NO_CREDIT_APPROVED,
        self::PAYMENT_STATE_THE_CREDIT_HAS_BEEN_PRELIMINARILY_ACCEPTED => Status::PAYMENT_STATE_THE_CREDIT_HAS_BEEN_PRELIMINARILY_ACCEPTED,
        self::PAYMENT_STATE_THE_CREDIT_HAS_BEEN_ACCEPTED => Status::PAYMENT_STATE_THE_CREDIT_HAS_BEEN_ACCEPTED,

        // shopware 5.3 compatibility
        self::PAYMENT_STATE_THE_PAYMENT_HAS_BEEN_ORDERED => 33, // = Status::PAYMENT_STATE_THE_PAYMENT_HAS_BEEN_ORDERED (since 5.4) or Status::PAYMENT_STATE_THE_PAYMENT_HAS_BEEN_ORDERED_BY_HANSEATIC_BANK (till 5.4)

        self::PAYMENT_STATE_A_TIME_EXTENSION_HAS_BEEN_REGISTERED => Status::PAYMENT_STATE_A_TIME_EXTENSION_HAS_BEEN_REGISTERED,
        self::PAYMENT_STATE_THE_PROCESS_HAS_BEEN_CANCELLED => Status::PAYMENT_STATE_THE_PROCESS_HAS_BEEN_CANCELLED,
    ];

    /**
     * @var string
     */
    private $value;

    /**
     * @param string $value
     */
    public function __construct($value)
    {
        $value = (string) $value;
        $this->value = $value;
    }

    /**
     * @return int
     */
    public function getStatusCode()
    {
        if (!isset(self::$paymentStatusMapping[$this->value])) {
            return self::$default;
        }
        return self::$paymentStatusMapping[$this->value];
    }
}
