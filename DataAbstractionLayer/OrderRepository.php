<?php

namespace AxytosKaufAufRechnungShopware5\DataAbstractionLayer;

use Axytos\ECommerce\Order\OrderCheckProcessStates;
use AxytosKaufAufRechnungShopware5\Paymentmethod\PaymentMethodOptions;
use Doctrine\ORM\EntityRepository;
use Shopware\Components\Model\ModelManager;
use Shopware\Models\Attribute\Order as AttributeOrder;
use Shopware\Models\Order\Order;
use Shopware\Models\Order\Status;
use Shopware\Models\Payment\Payment;

class OrderRepository
{
    /**
     * @param int $orderId
     * @return \Shopware\Models\Order\Order|null
     */
    public function findOrder($orderId)
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        /** @var \Shopware\Models\Order\Repository */
        $orderRepository = $modelManager->getRepository(Order::class);

        /** @var \Shopware\Models\Order\Order */
        return $orderRepository->find($orderId);
    }

    /**
     * @param \Shopware\Models\Order\Order $order
     * @param int $orderStatusCode
     * @return void
     */
    public function saveOrderStatus($order, $orderStatusCode)
    {
        $orderStatus = $this->findStatusModelByCode($orderStatusCode);

        $order->setOrderStatus($orderStatus);

        $this->saveOrder($order);
    }

    /**
     * @param \Shopware\Models\Order\Order $order
     * @param int $paymentStatusCode
     * @return void
     */
    public function savePaymentStatus($order, $paymentStatusCode)
    {
        $paymentStatus = $this->findStatusModelByCode($paymentStatusCode);

        $order->setPaymentStatus($paymentStatus);

        $this->saveOrder($order);
    }

    /**
     * @param \Shopware\Models\Order\Order $order
     * @param \AxytosKaufAufRechnungShopware5\Configuration\AfterCheckoutOrderStatus $afterCheckoutOrderStatus
     * @return void
     */
    public function saveAfterCheckoutOrderStatus($order, $afterCheckoutOrderStatus)
    {
        $this->saveOrderStatus($order, $afterCheckoutOrderStatus->getStatusCode());
    }

    /**
     * @param \Shopware\Models\Order\Order $order
     * @param \AxytosKaufAufRechnungShopware5\Configuration\AfterCheckoutPaymentStatus $afterCheckoutPaymentStatus
     * @return void
     */
    public function saveAfterCheckoutPaymentStatus($order, $afterCheckoutPaymentStatus)
    {
        $this->savePaymentStatus($order, $afterCheckoutPaymentStatus->getStatusCode());
    }

    /**
     * @param \Shopware\Models\Order\Order $order
     * @return void
     */
    public function saveOrder($order)
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        $modelManager->persist($order);
        $modelManager->flush();
    }

    /**
     * @param int $statusCode
     * @return \Shopware\Models\Order\Status
     */
    private function findStatusModelByCode($statusCode)
    {
        $statusCode = (int) $statusCode;
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        /** @var EntityRepository<Status> */
        $statusRepository = $modelManager->getRepository(Status::class);

        /** @var Status */
        return $statusRepository->find($statusCode);
    }

    /**
     * @param string[] $orderStates
     * @param int|null $limit
     * @param string|null $firstId
     * @return \Shopware\Models\Order\Order[]
     */
    public function getOrdersByStates($orderStates, $limit = null, $firstId = null)
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        $queryBuilder = $modelManager->createQueryBuilder();
        $query = $queryBuilder->select('o')
            ->from(Order::class, 'o')
            ->leftJoin(Payment::class, 'p', 'WITH', 'p.id = o.paymentId')
            ->leftJoin(AttributeOrder::class, 'oa', 'WITH', 'o.id = oa.orderId') // @phpstan-ignore-line because this class is generated by shopware
            ->where('p.name = :paymentMethod')
            ->andWhere('oa.axytosKaufAufRechnungOrderState IN (:orderStates)')
            ->setParameter('paymentMethod', PaymentMethodOptions::NAME)
            ->setParameter('orderStates', $orderStates)
            ->orderBy('o.number')
            ->getQuery();

        /** @var Order[] */
        $orders = $query->execute();

        if (is_string($firstId)) {
            for ($i = 0; $i < count($orders); ++$i) {
                if ($orders[$i]->getNumber() === $firstId) {
                    return array_slice($orders, $i, $limit);
                }
            }
        }

        return array_slice($orders, 0, $limit);
    }

    /**
     * @param string $orderNumber
     * @return \Shopware\Models\Order\Order|null
     */
    public function findOrderByOrderNumber($orderNumber)
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        /** @var \Shopware\Models\Order\Repository */
        $orderRepository = $modelManager->getRepository(Order::class);

        /** @var \Shopware\Models\Order\Order[] */
        $orders = $orderRepository->findBy(['number' => $orderNumber]);
        if (count($orders) > 0) {
            return $orders[0];
        } else {
            return null;
        }
    }

    /**
     * @return void
     */
    public function beginTransaction()
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');
        $modelManager->beginTransaction();
    }

    /**
     * @return void
     */
    public function commitTransaction()
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');

        if ($modelManager->isOpen()) {
            $modelManager->flush();
        }

        $modelManager->commit();
    }

    /**
     * @return void
     */
    public function rollbackTransaction()
    {
        /** @var ModelManager */
        $modelManager = Shopware()->Container()->get('models');
        $modelManager->rollback();
    }
}
